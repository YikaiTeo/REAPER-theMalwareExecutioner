// timer's variebles ▼
var timer;
var timer_number;
// player life's variebles ▼
var PC;
var stage3_chances = 3;
var missed = false;
var invinc = false;
// villain ▼
var villain;
var wormLine1;
var wormLine2;
var wormLine3;
var wormLine1_child;
var wormLine2_child;
var wormLine3_child;
var defeated = false;
// controls' variebles ▼
var cursors;
var moveUP = false;
var moveDOWN = false;
var Up = false;
var Down = false;
var greenline;
var greenshield;
var connection_line = 1;
// audio's variebles ▼
var switchKey;
var UP_audio = false;
var DOWN_audio = false;
var BGM;
var success;
var failed;
var GG;
var Warning;
var End;

class stage_3 extends Phaser.Scene {
  constructor() {
    super({ key: "stage_3" });
  }

  preload() {
    this.load.svg("background3", "src/assets/stage3bg.svg", {
      width: 1280,
      height: 720
    });
    this.load.image("Background_small", "src/assets/stage3bg_side.png");
    this.load.svg("Watch", "src/assets/timer.svg", {
      width: 52.46,
      height: 62.87
    });
    this.load.svg("Computer", "src/assets/computer.svg", {
      width: 224.59,
      height: 348.39
    });
    this.load.svg("mitm", "src/assets/MITM_villain.svg", {
      width: 392.52,
      height: 355.58
    });
    this.load.svg("Worm", "src/assets/worm.svg", {
      width: 101.76,
      height: 30.24
    });
    this.load.svg("line", "src/assets/connection.svg", {
      width: 625.93,
      height: 327.72
    });
    this.load.svg("green_line", "src/assets/green_connection.svg", {
      width: 625.93,
      height: 27.1
    });
    this.load.svg("green_shield", "src/assets/green_shield.svg", {
      width: 142.27,
      height: 123.02
    });
    this.load.audio("bgm", [
      "src/assets/audio/mixkit-game-level-music-689.mp3"
    ]);
    this.load.audio("UpDownKey", [
      "src/assets/audio/mixkit-sci-fi-positive-notification-266.mp3"
    ]);
    this.load.audio("Success", [
      "src/assets/audio/mixkit-unlock-game-notification-253.mp3"
    ]);
    this.load.audio("Failed", [
      "src/assets/audio/mixkit-electronic-retro-block-hit-2185.mp3"
    ]);
    this.load.audio("GameOver", [
      "src/assets/audio/mixkit-arcade-retro-game-over-213.mp3"
    ]);
    this.load.audio("warning", [
      "src/assets/audio/mixkit-negative-game-notification-249.mp3"
    ]);
    this.load.audio("end", [
      "src/assets/audio/mixkit-arcade-game-explosion-echo-1698.mp3"
    ]);
  }

  create() {
    // back ground music ▼
    BGM = this.sound.add("bgm", { volume: 0.5 });
    BGM.loop = true;
    // audio from key pressed ▼
    switchKey = this.sound.add("UpDownKey");
    // audio of enemies' hit ▼
    success = this.sound.add("Success");
    failed = this.sound.add("Failed");
    // Game Over music ▼
    GG = this.sound.add("GameOver");
    // beeping warning ▼
    Warning = this.sound.add("warning");
    // stage cleared music ▼
    End = this.sound.add("end");
    // AUDIO ▲

    stage3_chances = 3;
    BGM.play();
    // background ▼
    this.background = this.add.image(640, 360, "background3");
    this.background_small = this.add.image(1265, 333, "Background_small");
    this.background_small.setDepth(5);
    // computer ▼
    PC = this.physics.add.image(165, 368, "Computer");
    // villain ▼
    villain = this.physics.add.image(1067, 326, "mitm");
    villain.setDepth(10);
    // lines ▼
    this.Line = this.add.image(595, 368, "line");
    greenline = this.add.image(0, 0, "green_line");
    greenshield = this.physics.add.image(0, 0, "green_shield");
    // graphics ▲

    this.worm_Line1(200);
    this.worm_Line2(351);
    this.worm_Line3(502);

    this.time.delayedCall(
      50000,
      function () {
        Warning.play();
        this.time.addEvent({
          delay: 500,
          callback: function () {
            Warning.play();
          },
          callbackScope: this,
          loop: true
        });
      },
      [],
      this
    );

    // timer ▼
    timer = this.time.delayedCall(60000, this.timesUP, [], this);
    this.watch = this.add.image(67, 140, "Watch");
    timer_number = this.add.text(110, 114, "60s left", {
      fontFamily: "DisposableDroidBB",
      fontSize: 50,
      color: "#ff2321"
    });

    // cursor keys ▼
    cursors = this.input.keyboard.createCursorKeys();
    // for debug ▼
    this.key1 = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.ONE);
  }

  worm_Line1(y) {
    wormLine1 = this.physics.add.group();
    wormLine1.create(900, y, "Worm");
    wormLine1.create(1000, y, "Worm");
    wormLine1.create(1600, y, "Worm");
    wormLine1.create(1690, y, "Worm");
    wormLine1.create(1750, y, "Worm");
    wormLine1.create(1900, y, "Worm");
    wormLine1.create(3000, y, "Worm");
    wormLine1.create(3100, y, "Worm");
    wormLine1.create(3250, y, "Worm");
    wormLine1.create(3500, y, "Worm");
    wormLine1.create(3550, y, "Worm");
    wormLine1.create(3780, y, "Worm");
    wormLine1.create(3900, y, "Worm");
    wormLine1.create(5609, y, "Worm");
    wormLine1.create(5902, y, "Worm");
    wormLine1.create(6483, y, "Worm");
    wormLine1.create(7000, y, "Worm");
    wormLine1.create(8022, y, "Worm");
    wormLine1.create(8145, y, "Worm");
    wormLine1.create(8264, y, "Worm");
    wormLine1.create(8308, y, "Worm");
    wormLine1.create(8425, y, "Worm");
    wormLine1.create(8574, y, "Worm");
    wormLine1.create(8627, y, "Worm");
    wormLine1.create(8709, y, "Worm");
    wormLine1.create(8825, y, "Worm");
    wormLine1.create(8914, y, "Worm");
    wormLine1.create(9251, y, "Worm");
    wormLine1.setVelocityX(-150);

    wormLine1_child = wormLine1.getChildren();
    this.physics.add.overlap(
      wormLine1_child,
      greenshield,
      this.passedLine1,
      null,
      this
    );
    this.physics.add.overlap(wormLine1_child, PC, this.missedLine1, null, this);
  }
  worm_Line2(y) {
    wormLine2 = this.physics.add.group();
    wormLine2.create(1000, y, "Worm");
    wormLine2.create(1900, y, "Worm");
    wormLine2.create(2000, y, "Worm");
    wormLine2.create(2590, y, "Worm");
    wormLine2.create(2650, y, "Worm");
    wormLine2.create(4000, y, "Worm");
    wormLine2.create(4500, y, "Worm");
    wormLine2.create(4955, y, "Worm");
    wormLine2.create(5000, y, "Worm");
    wormLine2.create(5432, y, "Worm");
    wormLine2.create(5678, y, "Worm");
    wormLine2.create(5806, y, "Worm");
    wormLine2.create(6002, y, "Worm");
    wormLine2.create(6290, y, "Worm");
    wormLine2.create(6500, y, "Worm");
    wormLine2.create(7500, y, "Worm");
    wormLine2.create(8000, y, "Worm");
    wormLine2.create(8123, y, "Worm");
    wormLine2.create(8434, y, "Worm");
    wormLine2.create(8754, y, "Worm");
    wormLine2.create(8890, y, "Worm");
    wormLine2.setVelocityX(-150);

    wormLine2_child = wormLine2.getChildren();
    this.physics.add.overlap(
      wormLine2_child,
      greenshield,
      this.passedLine2,
      null,
      this
    );
    this.physics.add.overlap(wormLine2_child, PC, this.missedLine2, null, this);
  }
  worm_Line3(y) {
    wormLine3 = this.physics.add.group();
    wormLine3.create(950, y, "Worm");
    wormLine3.create(1500, y, "Worm");
    wormLine3.create(2600, y, "Worm");
    wormLine3.create(3459, y, "Worm");
    wormLine3.create(4955, y, "Worm");
    wormLine3.create(5437, y, "Worm");
    wormLine3.create(6806, y, "Worm");
    wormLine3.create(7100, y, "Worm");
    wormLine3.create(8290, y, "Worm");
    wormLine3.create(8349, y, "Worm");
    wormLine3.create(8453, y, "Worm");
    wormLine3.create(8546, y, "Worm");
    wormLine3.create(8679, y, "Worm");
    wormLine3.create(8745, y, "Worm");
    wormLine3.create(8890, y, "Worm");
    wormLine3.create(9123, y, "Worm");
    wormLine3.create(9200, y, "Worm");
    wormLine3.setVelocityX(-150);

    wormLine3_child = wormLine3.getChildren();
    this.physics.add.overlap(
      wormLine3_child,
      greenshield,
      this.passedLine3,
      null,
      this
    );
    this.physics.add.overlap(wormLine3_child, PC, this.missedLine3, null, this);
  }

  passedLine1() {
    success.play();
    wormLine1.remove(wormLine1.getFirst(true), true);
  }
  passedLine2() {
    success.play();
    wormLine2.remove(wormLine2.getFirst(true), true);
  }
  passedLine3() {
    success.play();
    wormLine3.remove(wormLine3.getFirst(true), true);
  }
  missedLine1() {
    if (invinc == false) {
      missed = true;
      wormLine1.remove(wormLine1.getFirst(true), true);
    }
  }
  missedLine2() {
    if (invinc == false) {
      missed = true;
      wormLine2.remove(wormLine2.getFirst(true), true);
    }
  }
  missedLine3() {
    if (invinc == false) {
      missed = true;
      wormLine3.remove(wormLine3.getFirst(true), true);
    }
  }

  timesUP() {
    BGM.stop();
    End.play();
    defeated = true;
    this.time.delayedCall(
      3000,
      function () {
        defeated = false;
        this.scene.stop("stage_3");
        this.scene.start("preloadScene");
      },
      [],
      this
    );
  }

  update() {
    var getTime = 61 - Phaser.Math.CeilTo(timer.getProgress() * 60);
    // // console.log(getTime);
    timer_number.setText(getTime + "s left");

    // controls ▼
    if (cursors.up.isDown && moveUP == false) {
      moveUP = true;
    } // trigger switch ▲
    if (cursors.down.isDown && moveDOWN == false) {
      moveDOWN = true;
    } //▲▲▲▲▲▲▲▲▲▲▲▲▲▲////////////// trigger switch
    if (moveUP == true && Up == false) {
      connection_line -= 1;
      // console.log(connection_line);
      Up = true;
    } // activated by switch ▲
    if (moveDOWN == true && Down == false) {
      connection_line += 1;
      // console.log(connection_line);
      Down = true;
    } //▲▲▲▲▲▲▲▲▲▲▲▲▲▲////////////// activated by switch
    if (cursors.up.isUp) {
      moveUP = false;
      Up = false;
      UP_audio = false;
    } // reset switch ▲
    if (cursors.down.isUp) {
      moveDOWN = false;
      Down = false;
      DOWN_audio = false;
    } //▲▲▲▲▲▲▲▲▲▲▲▲▲▲////////////// reset switch
    ///▼▼▼▼▼▼▼▼▼▼▼▼▼▼////////////// controls' audio
    if (Up == true && UP_audio == false) {
      UP_audio = true;
      switchKey.play();
    }
    if (Down == true && DOWN_audio == false) {
      DOWN_audio = true;
      switchKey.play();
    }

    // green line's graphic update ▼
    if (connection_line > 3) {
      connection_line = 1;
      // console.log("skipped to top");
    }
    if (connection_line < 1) {
      connection_line = 3;
      // console.log("skipped to bottom");
    }
    if (connection_line == 1) {
      greenline.setPosition(595, 217);
      greenshield.setPosition(410, 217);
    } else if (connection_line == 2) {
      greenline.setPosition(595, 368);
      greenshield.setPosition(410, 368);
    } else if (connection_line == 3) {
      greenline.setPosition(595, 519);
      greenshield.setPosition(410, 519);
    }

    // villain defeated ▼
    if (defeated == true) {
      villain.setVelocityX(Phaser.Math.Between(300, 400));
      if (villain.x >= 1067) {
        villain.setVelocityX(Phaser.Math.Between(-300, -400));
      } else if (villain.x <= 1067) {
        villain.setVelocityX(Phaser.Math.Between(300, 400));
      }
      villain.setVelocityY(Phaser.Math.Between(300, 400));
      if (villain.y >= 326) {
        villain.setVelocityY(Phaser.Math.Between(-300, -400));
      } else if (villain.y <= 326) {
        villain.setVelocityY(Phaser.Math.Between(300, 400));
      }
    }

    // if missed the worm ▼
    if (missed == true) {
      console.log("Lives: ", stage3_chances - 1);
      failed.play();
      this.cameras.main.shake(50);
      missed = false;
      stage3_chances -= 1;
      // temporary invincible after damage ▼
      invinc = true;
      this.time.delayedCall(
        1000,
        function () {
          invinc = false;
        },
        [],
        this
      );
    }
    // when out of lives ▼
    if (stage3_chances <= 0) {
      console.log("You lost");
      BGM.stop();
      GG.play();
      stage3_chances = 3;
      this.scene.stop("stage_2");
      this.scene.start("preloadScene");
    }

    // for debug ▼
    if (this.key1.isDown) {
      BGM.stop();
      this.scene.stop("stage_2");
      this.scene.start("preloadScene");
    }
  }
}
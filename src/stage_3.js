// timer's variebles ▼
var timer;
var timer_number;
// player life's variebles ▼
var stage2_chances = 3;
var missed = false;
var invinc = false;
// villain ▼
var villain;
var defeated = false;
// button's variebles ▼
var Greenline;
var Redline;
var fButton;
var jButton;
var fPressed = false;
var jPressed = false;
// object group's variebles ▼
var Greenmail;
var Greenmail_child;
var Redmail;
var Redmail_child;
// audio's variebles ▼
var switchKey;
var Fkey_audio = false;
var Jkey_audio = false;
var BGM;
var success;
var failed;
var GG;
var Warning;
var End;

class stage_3 extends Phaser.Scene {
  constructor() {
    super({ key: "stage_3" });
  }

  preload() {
    this.load.svg("background3", "src/assets/stage3bg.svg", {
      width: 1280,
      height: 720
    });
    this.load.svg("Watch", "src/assets/timer.svg", {
      width: 52.46,
      height: 62.87
    });
    this.load.svg("SL_bitmap", "src/assets/safeline_bitmap.svg", {
      width: 960.15,
      height: 91.66
    });
    this.load.svg("green", "src/assets/greenLine.svg", {
      width: 898.02,
      height: 4
    });
    this.load.svg("red", "src/assets/redLine.svg", {
      width: 898.02,
      height: 4
    });
    this.load.svg("f_button", "src/assets/F_button.svg", {
      width: 130.28,
      height: 108.43
    });
    this.load.svg("j_button", "src/assets/J_button.svg", {
      width: 130.28,
      height: 108.43
    });
    this.load.svg("gMail", "src/assets/greenMail.svg", {
      width: 92.27,
      height: 69.8
    });
    this.load.svg("rMail", "src/assets/redMail.svg", {
      width: 92.27,
      height: 69.8
    });
    this.load.svg("mitm", "src/assets/MITM_villain.svg", {
      width: 392.52,
      height: 355.58
    });    
    this.load.audio("bgm", [
      "src/assets/audio/mixkit-game-level-music-689.mp3"
    ]);
    this.load.audio("FJkey", [
      "src/assets/audio/mixkit-sci-fi-positive-notification-266.mp3"
    ]);
    this.load.audio("Success", [
      "src/assets/audio/mixkit-unlock-game-notification-253.mp3"
    ]);
    this.load.audio("Failed", [
      "src/assets/audio/mixkit-electronic-retro-block-hit-2185.mp3"
    ]);
    this.load.audio("GameOver", [
      "src/assets/audio/mixkit-arcade-retro-game-over-213.mp3"
    ]);
    this.load.audio("warning", [
      "src/assets/audio/mixkit-negative-game-notification-249.mp3"
    ]);
    this.load.audio("end", [
      "src/assets/audio/mixkit-arcade-game-explosion-echo-1698.mp3"
    ]);
  }

  create() {
    BGM = this.sound.add("bgm", {volume: 0.5});
    BGM.loop = true;
    switchKey = this.sound.add("FJkey")
    success = this.sound.add("Success");
    failed = this.sound.add("Failed");
    GG = this.sound.add("GameOver");
    Warning = this.sound.add("warning");
    End = this.sound.add("end");

    // BGM.play();
    this.background = this.add.image(640, 360, "background3");
    villain = this.physics.add.image(1067, 326, "mitm");

    // this.main();
    // graphics ▲
    // timer ▼
    // timer = this.time.delayedCall(60000, this.timesUP, [], this);
    this.watch = this.add.image(67, 140, "Watch");
    timer_number = this.add.text(110, 114, "60s left", {
      fontFamily: "DisposableDroidBB",
      fontSize: 50,
      color: "#ff2321"
    });

    // keyboards input ▼
    this.keyF = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.F);
    this.keyJ = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.J);
    // for debug ▼
    this.key1 = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.ONE);
  }

  main() {
    this.bitmap = this.add.image(640, 550, "SL_bitmap");
    Greenline = this.physics.add.image(640, 550, "green");
    Redline = this.physics.add.image(640, 550, "red");
    fButton = this.add.image(214, 550, "f_button");
    jButton = this.add.image(1066, 550, "j_button");
  }

  // mails_pattern1() {
  //   // green mails ▼
  //   Greenmail = this.physics.add.group();
  //   Greenmail.create(640, 0 - Phaser.Math.Between(0, 100), "gMail").setRotation(
  //     Phaser.Math.Between(-180, 180)
  //   );
  //   Greenmail.create(640, 0 - Phaser.Math.Between(500, 600), "gMail").setRotation(
  //     Phaser.Math.Between(-180, 180)
  //   );
  //   Greenmail.create(640, 0 - Phaser.Math.Between(1000, 1100), "gMail").setRotation(
  //     Phaser.Math.Between(-180, 180)
  //   );
  //   Greenmail.create(640, 0 - Phaser.Math.Between(1500, 1600), "gMail").setRotation(
  //     Phaser.Math.Between(-180, 180)
  //   );
  //   Greenmail.create(640, 0 - Phaser.Math.Between(2000, 2100), "gMail").setRotation(
  //     Phaser.Math.Between(-180, 180)
  //   );
  //   Greenmail.setVelocityY(200);

  //   Greenmail_child = Greenmail.getChildren();
  //   this.physics.add.overlap(Greenmail_child, Greenline, this.passed, null, this);
  //   this.physics.add.overlap(Greenmail_child, Redline, this.missed, null, this);

  //   // red mails ▼
  //   Redmail = this.physics.add.group();
  //   Redmail.create(640, 0 - Phaser.Math.Between(250, 350), "rMail").setRotation(
  //     Phaser.Math.Between(-180, 180)
  //   );
  //   Redmail.create(640, 0 - Phaser.Math.Between(750, 850), "rMail").setRotation(
  //     Phaser.Math.Between(-180, 180)
  //   );
  //   Redmail.create(640, 0 - Phaser.Math.Between(1250, 1350), "rMail").setRotation(
  //     Phaser.Math.Between(-180, 180)
  //   );
  //   Redmail.create(640, 0 - Phaser.Math.Between(1750, 1850), "rMail").setRotation(
  //     Phaser.Math.Between(-180, 180)
  //   );
  //   Redmail.create(640, 0 - Phaser.Math.Between(2250, 2350), "rMail").setRotation(
  //     Phaser.Math.Between(-180, 180)
  //   );
  //   Redmail.setVelocityY(200);

  //   Redmail_child = Redmail.getChildren();
  //   this.physics.add.overlap(Redmail_child, Redline, this.denied, null, this);
  //   this.physics.add.overlap(Redmail_child, Greenline, this.missed, null, this);
  // }
  
  passed() {
    if (this.keyJ.isDown && fPressed == false) {
      success.play();
      Greenmail.remove(Greenmail.getFirst(true), true);
    }
    if (fPressed == false && jPressed == false && invinc == false) {
      missed = true;
    }
  }
  denied() {
    if (this.keyF.isDown && jPressed == false) {
      success.play();
      Redmail.remove(Redmail.getFirst(true), true);
    }
    if (fPressed == false && jPressed == false && invinc == false) {
      missed = true;
    }
  }
  missed() {
    if (this.keyF.isDown && jPressed == false && invinc == false) {
      missed = true;
      Greenmail.remove(Greenmail.getFirst(true), true);
    }
    if (this.keyJ.isDown && fPressed == false && invinc == false) {
      missed = true;
      Redmail.remove(Redmail.getFirst(true), true);
    }
  }

  timesUP() {
    BGM.stop();
    End.play();
    defeated = true;
    this.time.delayedCall(3000, function () {
      defeated = false;
      this.scene.stop("stage_3");
      this.scene.start("preloadScene");
    }, [], this);
  }

  update() {
    // var getTime = 61 - Phaser.Math.CeilTo(timer.getProgress() * 60);
    // // console.log(getTime);
    // timer_number.setText(getTime + "s left");

    // controls ▼
    // if (this.keyF.isDown && jPressed == false) {
    //   // console.log("F Key ", fPressed)
    //   fButton.clearTint();
    //   Redline.setOffset(0, 0);
    //   Redline.setActive(true);
    //   Redline.setVisible(true);
    //   fPressed = true;
    // } else {
    //   fButton.setTint(0x7e7e7e);
    //   Redline.setOffset(0, 50);
    //   Redline.setActive(false);
    //   Redline.setVisible(false);
    //   fPressed = false;
    //   Fkey_audio = false;
    // }
    // if (this.keyJ.isDown && fPressed == false) {
    //   // console.log("J Key ", fPressed)
    //   jButton.clearTint();
    //   Greenline.setOffset(0, 0);
    //   Greenline.setActive(true);
    //   Greenline.setVisible(true);
    //   jPressed = true;
    // } else {
    //   jButton.setTint(0x7e7e7e);
    //   Greenline.setOffset(0, 50);
    //   Greenline.setActive(false);
    //   Greenline.setVisible(false);
    //   jPressed = false;
    //   Jkey_audio = false;
    // }
    // controls' audio ▼
    if (fPressed == true && Fkey_audio == false) {
      Fkey_audio = true;
      // console.log("Fkey ", Fkey_audio)
      switchKey.play();
    }
    if (jPressed == true && Jkey_audio == false) {
      Jkey_audio = true;
      // console.log("Jkey ", Jkey_audio)
      switchKey.play();
    }
    
    // villain defeated ▼
    if (defeated == true) {
      villain.setVelocityX(Phaser.Math.Between(500, 600));
      if(villain.x >= 1067) {
        villain.setVelocityX(Phaser.Math.Between(- 500, - 600));
      } else if(villain.x <= 1067) {
        villain.setVelocityX(Phaser.Math.Between(500, 600));
      };
      villain.setVelocityY(Phaser.Math.Between(500, 600));
      if(villain.y >= 326) {
        villain.setVelocityY(Phaser.Math.Between(- 500, - 600));
      } else if(villain.y <= 326) {
        villain.setVelocityY(Phaser.Math.Between(500, 600));
      };
    }

    // if missed the mails ▼
    if (missed == true) {
      console.log("Lives: ", stage2_chances - 1);
      failed.play();
      this.cameras.main.shake(50);
      missed = false;
      stage2_chances -= 1;
      // temporary invincible after damage ▼
      invinc = true;
      this.time.delayedCall(1000, function () {
        invinc = false;
      }, [], this);
    }
    // when out of lives ▼
    if (stage2_chances <= 0) {
      console.log("You lost");
      BGM.stop();
      GG.play();
      stage2_chances = 3;
      this.scene.stop("stage_2");
      this.scene.start("preloadScene");
    }

    // for debug ▼
    if (this.key1.isDown) {
      BGM.stop();
      this.scene.stop("stage_2");
      this.scene.start("preloadScene");
    }
  }
}
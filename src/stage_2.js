var stage2_chances = 3;
var missed = false;
var invinc = false;
var Greenline;
var Redline;
var fButton;
var jButton;
var fPressed = false;
var jPressed = false;
var Greenmail;
var Greenmail_child;
var Redmail;
var Redmail_child;

class stage_2 extends Phaser.Scene {
  constructor() {
    super({ key: "stage_2" });
  }

  preload() {
    this.load.svg("background2", "src/assets/stage2bg.svg", {
      width: 1280,
      height: 720
    });
    this.load.svg("SL_bitmap", "src/assets/safeline_bitmap.svg", {
      width: 960.15,
      height: 91.66
    });
    this.load.svg("green", "src/assets/greenLine.svg", {
      width: 898.02,
      height: 4
    });
    this.load.svg("red", "src/assets/redLine.svg", {
      width: 898.02,
      height: 4
    });
    this.load.svg("f_button", "src/assets/F_button.svg", {
      width: 130.28,
      height: 108.43
    });
    this.load.svg("j_button", "src/assets/J_button.svg", {
      width: 130.28,
      height: 108.43
    });
    this.load.svg("gMail", "src/assets/greenMail.svg", {
      width: 92.27,
      height: 69.8
    });
    this.load.svg("rMail", "src/assets/redMail.svg", {
      width: 92.27,
      height: 69.8
    });
    this.load.image("phishing", "src/assets/phishing_scam_villain.png");
  }

  create() {
    this.background = this.add.image(640, 360, "background2");
    this.villain = this.add.image(680, 250, "phishing");

    this.main();

    this.mails(640, 200, 100);
    // graphics ▲

    // keyboards input ▼
    this.keyF = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.F);
    this.keyJ = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.J);
    // for debug ▼
    this.key1 = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.ONE);
  }

  main() {
    this.bitmap = this.add.image(640, 550, "SL_bitmap");
    Greenline = this.physics.add.image(640, 550, "green");
    Redline = this.physics.add.image(640, 550, "red");
    fButton = this.add.image(214, 550, "f_button");
    jButton = this.add.image(1066, 550, "j_button");
  }

  mails(x, y, speed) {

    // green mails ▼
    Greenmail = this.physics.add.group();
    Greenmail.create(x, y - Phaser.Math.Between(0, 100), "gMail");
    Greenmail.create(x, y - Phaser.Math.Between(200, 300), "gMail");
    Greenmail.create(x, y - Phaser.Math.Between(400, 500), "gMail");
    Greenmail.create(x, y - Phaser.Math.Between(600, 700), "gMail");
    Greenmail.create(x, y - Phaser.Math.Between(800, 900), "gMail");
    Greenmail.setVelocityY(speed);

    Greenmail_child = Greenmail.getChildren();
    this.physics.add.overlap(Greenmail_child, Greenline, this.passed, null, this);
    this.physics.add.overlap(Greenmail_child, Redline, this.missed, null, this);

    // green mails ▼
    Redmail = this.physics.add.group();
    Redmail.create(x, y - Phaser.Math.Between(150, 250), "rMail");
    Redmail.create(x, y - Phaser.Math.Between(350, 450), "rMail");
    Redmail.create(x, y - Phaser.Math.Between(550, 650), "rMail");
    Redmail.create(x, y - Phaser.Math.Between(750, 850), "rMail");
    Redmail.create(x, y - Phaser.Math.Between(950, 1050), "rMail");
    Redmail.setVelocityY(speed);

    Redmail_child = Redmail.getChildren();
    this.physics.add.overlap(Redmail_child, Redline, this.denied, null, this);
    this.physics.add.overlap(Redmail_child, Greenline, this.missed, null, this);

  }

  passed() {
    if (this.keyJ.isDown && fPressed == false) {
      Greenmail.remove(Greenmail.getFirst(true), true);
    }
    if (fPressed == false && jPressed == false && invinc == false) {
      missed = true
    }
  }
  denied() {
    if (this.keyF.isDown && jPressed == false) {
      Redmail.remove(Redmail.getFirst(true), true);
    }
    if (fPressed == false && jPressed == false && invinc == false) {
      missed = true
    }
  }
  missed() {
    if (this.keyF.isDown && jPressed == false && invinc == false) {
      missed = true;
      Greenmail.remove(Greenmail.getFirst(true), true);
    }
    if (this.keyJ.isDown && fPressed == false && invinc == false) {
      missed = true;
      Redmail.remove(Redmail.getFirst(true), true);
    }
  }

  update() {
    if (this.keyF.isDown && jPressed == false) {
      fButton.clearTint();
      Redline.setOffset(0, 0);
      Redline.setActive(true);
      Redline.setVisible(true);
      fPressed = true;
    } else {
      fButton.setTint(0x7e7e7e);
      Redline.setOffset(0, 50);
      Redline.setActive(false);
      Redline.setVisible(false);
      fPressed = false;
    }
    if (this.keyJ.isDown && fPressed == false) {
      jButton.clearTint();
      Greenline.setOffset(0, 0);
      Greenline.setActive(true);
      Greenline.setVisible(true);
      jPressed = true;
    } else {
      jButton.setTint(0x7e7e7e);
      Greenline.setOffset(0, 50);
      Greenline.setActive(false);
      Greenline.setVisible(false);
      jPressed = false;
    }

    if(missed == true) {
      console.log(stage2_chances - 1);
      this.cameras.main.shake(50);
      missed = false;
      stage2_chances -= 1;
      // temporary invincible after damage ▼
      invinc = true;
      this.time.delayedCall(1000, function () {
        invinc = false;
      }, [], this);
    }

    if(stage2_chances <= 0) {
      console.log("You lost");
      this.scene.stop("stage_2");
    }

    // for debug ▼
    if (this.key1.isDown) {
      this.scene.stop("stage_2");
      this.scene.start("preloadScene");
    }
  }
}
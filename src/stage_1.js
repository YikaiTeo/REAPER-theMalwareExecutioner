// timer's variebles ▼
var timer;
var timer_number;
// player life's variebles ▼
var stage1_chances = 3;
var missed = false;
var invinc = false;
// villain ▼
var villain;
var cookie;
var defeated = false;
// controls' variebles ▼
var cursors;
var moveUP = false;
var moveDOWN = false;
var Up = false;
var Down = false;
var greenline;
var greenshield;
var connection_line = 1;
// audio's variebles ▼
var switchKey;
var UP_audio = false;
var DOWN_audio = false;
var BGM;
var success;
var failed;
var GG;
var Warning;
var End;

class stage_1 extends Phaser.Scene {
  constructor() {
    super({ key: "stage_1" });
  }

  preload() {
    this.load.svg("background1", "src/assets/stage1bg.svg", {
      width: 1280,
      height: 720
    });
    this.load.svg("Watch", "src/assets/timer.svg", {
      width: 52.46,
      height: 62.87
    });
    this.load.image("bot", "src/assets/scraping_bot_villain.png");
    this.load.image("cookie", "src/assets/cookie.png");
    this.load.audio("bgm", [
      "src/assets/audio/mixkit-game-level-music-689.mp3"
    ]);
    this.load.audio("UpDownKey", [
      "src/assets/audio/mixkit-sci-fi-positive-notification-266.mp3"
    ]);
    this.load.audio("Success", [
      "src/assets/audio/mixkit-unlock-game-notification-253.mp3"
    ]);
    this.load.audio("Failed", [
      "src/assets/audio/mixkit-electronic-retro-block-hit-2185.mp3"
    ]);
    this.load.audio("GameOver", [
      "src/assets/audio/mixkit-arcade-retro-game-over-213.mp3"
    ]);
    this.load.audio("warning", [
      "src/assets/audio/mixkit-negative-game-notification-249.mp3"
    ]);
    this.load.audio("end", [
      "src/assets/audio/mixkit-arcade-game-explosion-echo-1698.mp3"
    ]);
  }

  create() {
    // back ground music ▼
    BGM = this.sound.add("bgm", { volume: 0.5 });
    BGM.loop = true;
    // audio from key pressed ▼
    switchKey = this.sound.add("UpDownKey");
    // audio of enemies' hit ▼
    success = this.sound.add("Success");
    failed = this.sound.add("Failed");
    // Game Over music ▼
    GG = this.sound.add("GameOver");
    // beeping warning ▼
    Warning = this.sound.add("warning");
    // stage cleared music ▼
    End = this.sound.add("end");
    // AUDIO ▲

    stage1_chances = 3;
    // BGM.play();
    // background ▼
    this.background = this.add.image(640, 360, "background1");
    // villain ▼
    villain = this.physics.add.image(680, 120.5, "bot");
    // graphics ▲

    // this.time.delayedCall(50000, function () {
    //   Warning.play();
    //   this.time.addEvent({delay: 500, callback: function () {
    //     Warning.play();
    //   }, callbackScope: this, loop: true});
    // }, [], this);

    // timer ▼
    timer = this.time.delayedCall(60000, this.timesUP, [], this);
    this.watch = this.add.image(67, 140, "Watch");
    timer_number = this.add.text(110, 114, "60s left", {
      fontFamily: "DisposableDroidBB",
      fontSize: 50,
      color: "#ff2321"
    });

    // controls ▼
    cursors = this.input.keyboard.createCursorKeys();
    this.keyW = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.W);
    this.keyA = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.A);
    this.keyS = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.S);
    this.keyD = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.D);
    this.keyJ = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.J);
    // for debug ▼
    this.key1 = this.input.keyboard.addKey(Phaser.Input.Keyboard.KeyCodes.ONE);
  }

  cookies()

  timesUP() {
    BGM.stop();
    End.play();
    defeated = true;
    this.time.delayedCall(
      3000,
      function () {
        defeated = false;
        this.scene.stop("stage_1");
        this.scene.start("preloadScene");
      },
      [],
      this
    );
  }

  update() {
    var getTime = 61 - Phaser.Math.CeilTo(timer.getProgress() * 60);
    // // console.log(getTime);
    timer_number.setText(getTime + "s left");

    // controls ▼
    if (cursors.up.isDown && moveUP == false) {
      moveUP = true;
    } // trigger switch ▲
    if (cursors.down.isDown && moveDOWN == false) {
      moveDOWN = true;
    } //▲▲▲▲▲▲▲▲▲▲▲▲▲▲////////////// trigger switch
    if (moveUP == true && Up == false) {
      connection_line -= 1;
      // console.log(connection_line);
      Up = true;
    } // activated by switch ▲
    if (moveDOWN == true && Down == false) {
      connection_line += 1;
      // console.log(connection_line);
      Down = true;
    } //▲▲▲▲▲▲▲▲▲▲▲▲▲▲////////////// activated by switch
    if (cursors.up.isUp) {
      moveUP = false;
      Up = false;
      UP_audio = false;
    } // reset switch ▲
    if (cursors.down.isUp) {
      moveDOWN = false;
      Down = false;
      DOWN_audio = false;
    } //▲▲▲▲▲▲▲▲▲▲▲▲▲▲////////////// reset switch
    ///▼▼▼▼▼▼▼▼▼▼▼▼▼▼////////////// controls' audio
    if (Up == true && UP_audio == false) {
      UP_audio = true;
      switchKey.play();
    }
    if (Down == true && DOWN_audio == false) {
      DOWN_audio = true;
      switchKey.play();
    }

    // villain defeated ▼
    if (defeated == true) {
      villain.setVelocityX(Phaser.Math.Between(300, 400));
      if (villain.x >= 680) {
        villain.setVelocityX(Phaser.Math.Between(-300, -400));
      } else if (villain.x <= 680) {
        villain.setVelocityX(Phaser.Math.Between(300, 400));
      }
      villain.setVelocityY(Phaser.Math.Between(300, 400));
      if (villain.y >= 120.5) {
        villain.setVelocityY(Phaser.Math.Between(-300, -400));
      } else if (villain.y <= 120.5) {
        villain.setVelocityY(Phaser.Math.Between(300, 400));
      }
    }

    // if cookie stolen ▼
    if (missed == true) {
      console.log("Lives: ", stage1_chances - 1);
      failed.play();
      this.cameras.main.shake(50);
      missed = false;
      stage1_chances -= 1;
      // temporary invincible after damage ▼
      invinc = true;
      this.time.delayedCall(
        1000,
        function () {
          invinc = false;
        },
        [],
        this
      );
    }
    // when out of lives ▼
    if (stage1_chances <= 0) {
      console.log("You lost");
      BGM.stop();
      GG.play();
      stage1_chances = 3;
      this.scene.stop("stage_1");
      this.scene.start("preloadScene");
    }

    // for debug ▼
    if (this.key1.isDown) {
      BGM.stop();
      this.scene.stop("stage_1");
      this.scene.start("preloadScene");
    }
  }
}